package bgu.spl.mics.application.subscribers;

import bgu.spl.mics.Subscriber;
import bgu.spl.mics.application.messages.GadgetAvailableEvent;
import bgu.spl.mics.application.messages.TickBroadcast;
import bgu.spl.mics.application.messages.lastTick;
import bgu.spl.mics.application.passiveObjects.Inventory;
import bgu.spl.mics.application.passiveObjects.MissionInfo;
import bgu.spl.mics.application.passiveObjects.Squad;
import javafx.util.Pair;

/**
 * Q is the only Subscriber\Publisher that has access to the {@link bgu.spl.mics.application.passiveObjects.Inventory}.
 *
 * You can add private fields and public methods to this class.
 * You MAY change constructor signatures and even add new public constructors.
 */
public class Q extends Subscriber {

	private int currentTick;
	private Inventory inventory;
	private int timeQ;
	private static class singletonQ {
		private static Q instance = new Q();
	}
	
	public Q() {
		super("Q");
		// TODO Implement this
		inventory=Inventory.getInstance();
	}

	@Override
	protected void initialize() {
		// TODO Implement this
		subscribeBroadcast(TickBroadcast.class, (tick) -> {
			currentTick = tick.gettick();
		});
		subscribeBroadcast(lastTick.class,ter->{
			terminate();
		});
		
		subscribeEvent(GadgetAvailableEvent.class,gadgetcall->{
			timeQ=currentTick;
			MissionInfo mission=gadgetcall.getMession();
			String gadget=mission.getGadget();
			Pair<Boolean,Pair<Integer,String>> returnedQ;
			if(inventory.getItem(gadget)) {
				returnedQ=new Pair<>(true,new Pair<Integer,String>(timeQ,gadget));
				
			}else {
				returnedQ=new Pair<>(false,null);
			}
			complete(gadgetcall,returnedQ);
		});
		
	}

}
