package bgu.spl.mics.application.publishers;

import bgu.spl.mics.MessageBroker;
import bgu.spl.mics.MessageBrokerImpl;
import bgu.spl.mics.Publisher;
import bgu.spl.mics.Subscriber;
import bgu.spl.mics.application.messages.TickBroadcast;

import java.util.Timer;
import java.util.TimerTask;

/**
 * TimeService is the global system timer There is only one instance of this Publisher.
 * It keeps track of the amount of ticks passed since initialization and notifies
 * all other subscribers about the current time tick using {@link Tick Broadcast}.
 * This class may not hold references for objects which it is not responsible for.
 * 
 * You can add private fields and public methods to this class.
 * You MAY change constructor signatures and even add new public constructors.
 */
public class TimeService extends Publisher {
	private static class SingletonTimeService {
		private static TimeService instance = new TimeService(100);
	}
	final private int time=100;
	private int duration;
	private Timer timer = new Timer();
	private int current;

	public TimeService(int duration) {
		super("TimeService");
		// TODO Implement this
		this.duration=duration;
		current=1;
	}

	@Override
	protected void initialize() {
		// TODO Implement this
		TimerTask doing=new TimerTask() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				if(current<duration) {
					//send broadcast 
				}else {
					timer.cancel();
				}
			}
			
		};
	}

	@Override
	public void run() {
		// TODO Implement this
//		subscribeBroadcast(TickBroadcast.class,(message)->{
//			this.terminate();
//		});
		getSimplePublisher().getMB().sendBroadcast(new TickBroadcast());
		
	}

}
